#include "dual-defines.inc"

ometa OMetaParser <: Parser {
  fromTo :x :y   = seq(x) (~seq(y) char)* seq(y), 
  space          = ^space | fromTo('//', '\n') | fromTo('/*', '*/'),
  nameFirst      = '_' | '$' | letter,
  nameRest       = nameFirst | digit,
  tsName         = firstAndRest(#nameFirst, #nameRest):xs              -> JOIN(xs, ''),
  name           = spaces tsName,
  eChar          = '\\' char:c                                         -> unescape('\\' +c)
                 | char,
  tsString       = '\'' (~'\'' eChar)*:xs '\''                         -> JOIN(xs, ''),
  characters     = '`' '`' (~('\'' '\'') eChar)*:xs '\'' '\''          -> [#App, #seq,     JOIN(xs, '').toProgramString()],
  sCharacters    = '"'     (~'"'         eChar)*:xs '"'                -> [#App, #token,   JOIN(xs, '').toProgramString()],
  string         = (('#' | '`') tsName | tsString):xs                  -> [#App, #exactly, xs.toProgramString()],
  number         = ('-' | empty -> ''):sign digit+:ds                  -> [#App, #exactly, sign + JOIN(ds, '')],
  keyword :xs    = token(xs) ~letterOrDigit                            -> xs,
  args           = '(' listOf(#hostExpr, ','):xs ")"                   -> xs
                 | empty                                               -> [],
  application    = "^"          name:rule args:as                      -> [#App, "super",                    "'" + rule + "'"].CONCAT(as)
                 | name:grm "." name:rule args:as                      -> [#App, "foreign", "'" + grm + "'", "'" + rule + "'"].CONCAT(as)
                 |              name:rule args:as                      -> [#App, rule].CONCAT(as),
  hostExpr       = WinxedSemActionParser.expr:r                           WinxedTranslator.trans(r),
  curlyHostExpr  = WinxedSemActionParser.curlySemAction:r                 WinxedTranslator.trans(r),
  primHostExpr   = WinxedSemActionParser.semAction:r                      WinxedTranslator.trans(r),
  atomicHostExpr = curlyHostExpr | primHostExpr,
  semAction      = curlyHostExpr:x                                     -> [#Act, x]
                 | "!"  atomicHostExpr:x                               -> [#Act, x],
  arrSemAction   = "->" atomicHostExpr:x                               -> [#Act, x],
  semPred        = "?"  atomicHostExpr:x                               -> [#Pred, x],
  expr           = expr5(true):x ("|"  expr5(true))+:xs                -> [#Or,  x].CONCAT(xs)
                 | expr5(true):x ("||" expr5(true))+:xs                -> [#XOr, x].CONCAT(xs)
                 | expr5(false),
  expr5 :ne      = interleavePart:x ("&&" interleavePart)+:xs          -> [#Interleave, x].CONCAT(xs)
                 | expr4(ne),
  interleavePart = "(" expr4(true):part ")"                            -> ["1", part]
                 | expr4(true):part modedIPart(part),
  modedIPart     = [#And [#Many  :part]]                               -> ["*", part]
                 | [#And [#Many1 :part]]                               -> ["+", part]
                 | [#And [#Opt   :part]]                               -> ["?", part]
                 | :part                                               -> ["1", part],
  expr4 :ne      =                expr3*:xs arrSemAction:act           -> [#And].CONCAT(xs).CONCAT([act])
                 | ?ne            expr3+:xs                            -> [#And].CONCAT(xs)
                 | ?(ne == false) expr3*:xs                            -> [#And].CONCAT(xs),
  optIter :x     = '*'                                                 -> [#Many,  x]
                 | '+'                                                 -> [#Many1, x]
                 | '?'                                                 -> [#Opt,   x]
                 | empty                                               -> x,
  optBind :x     = ':' name:n                                          -> { SELF['locals'].push(n); [#Set, n, x] }
                 | empty                                               -> x,
  expr3          = ":" name:n                                          -> { SELF['locals'].push(n); [#Set, n, [#App, #anything]] }
                 | (expr2:x optIter(x) | semAction):e optBind(e)
                 | semPred,
  expr2          = "~" expr2:x                                         -> [#Not,       x]
                 | "&" expr1:x                                         -> [#Lookahead, x]
                 | expr1,
  expr1          = application 
                 | ( keyword('null') | keyword('true') | keyword('false')):x
                                                                       -> [#App, #exactly, x]
                 | spaces (characters | sCharacters | string | number)
                 | "["  expr:x "]"                                     -> [#Form,      x]
                 | "<"  expr:x ">"                                     -> [#ConsBy,    x]
                 | "@<" expr:x ">"                                     -> [#IdxConsBy, x]
                 | "("  expr:x ")"                                     -> x,
  ruleName       = name
                 | spaces tsString,
  rule           = &(ruleName:n) !(SELF['locals'] = ['fromIdx=self.input.idx'])
                     rulePart(n):x ("," rulePart(n))*:xs               -> [#Rule, n, SELF['locals'], [#Or, x].CONCAT(xs)],
  rulePart :rn   = ruleName:n ?(n == rn) expr4:b1 ( "=" expr:b2        -> [#And, b1, b2]
                                                  | empty              -> b1
                                                  ),
  grammar        = keyword('ometa') name:n
                     ( "<:" name | empty -> 'OMeta' ):sn
                     "{" listOf(#rule, ','):rs "}"                        OMetaOptimizer.optimizeGrammar(
                                                                            [#Grammar, n, sn].CONCAT(rs)
                                                                          )
}

// By dispatching on the head of a list, the following idiom allows translators to avoid doing a linear search.
// (Note that the "=" in a rule definition is optional, so you can give your rules an "ML feel".)
ometa OMetaTranslator {
  App        'super' anything+:args        -> ('self._superApplyWithArgs("' + SELF['sName'] + '",' + JOIN(args, ',') + ')'),
  App        :rule   anything+:args        -> ('self._applyWithArgs("' + rule + '",' +               JOIN(args, ',') + ')'),
  App        :rule                         -> ('self._apply("' + rule + '")'),
  Act        :expr                         -> expr,
  Pred       :expr                         -> ('self._pred(' + expr + ')'),
  Or         transFn*:xs                   -> ('self._or(' +  JOIN(xs, ',') + ')'),
  XOr        transFn*:xs                       {xs.unshift((SELF['name'] + "." + SELF['rName']).toProgramString())}
                                           -> ('self._xor(' + JOIN(xs, ',') + ')'),
  And        notLast(#trans)*:xs trans:y
             {xs.push('return ' + y)}      -> ('(function(var self){' + JOIN(xs, ';') + ';})(self)'),
  And                                      -> '',
  Opt        transFn:x                     -> ('self._opt(' +           x + ')'),
  Many       transFn:x                     -> ('self._many(' +          x + ')'),
  Many1      transFn:x                     -> ('self._many1(' +         x + ')'),
  Set        :n trans:v                    -> (n + '=' + v),
  Not        transFn:x                     -> ('self._not(' +           x + ')'),
  Lookahead  transFn:x                     -> ('self._lookahead(' +     x + ')'),
  Form       transFn:x                     -> ('self._form(' +          x + ')'),
  ConsBy     transFn:x                     -> ('self._consumedBy(' +    x + ')'),
  IdxConsBy  transFn:x                     -> ('self._idxConsumedBy(' + x + ')'),
  JumpTable  jtCase*:cases                 -> SELF.jumpTableCode(cases),
  Interleave intPart*:xs                   -> ('self._interleave(' + JOIN(xs, ',') + ')'),
  
  Rule       :name {SELF['rName'] = name}
             locals:ls trans:body          -> ('function ' + name + '(){' + ls + 'return ' + body + ';}'),
  Grammar    :name :sName
             {SELF['name']  = name}
             {SELF['sName'] = sName}
             trans*:rules                  -> ('class ' + name + ' : ' + sName + ' {' + JOIN(rules, '') + '}'),
  intPart  = [:mode transFn:part]          -> (mode.toProgramString()  + "," + part),
  jtCase   = [:x trans:e]                  -> [x.toProgramString(), e],

  local    = string:n ( ?(SELF['seen'][n])        -> ''
                      | !(SELF['seen'][n] = true) -> ('volatile var ' + n + ' ;')
                      ),

  locals   = !(SELF['seen'] = {}) [ local+:vs ] -> JOIN(vs, '')
           | []                            -> '',
  trans    = [:t apply(t):ans]             -> ans,
  transFn  = trans:x                       -> ('(function(var self){return ' + x + ';})')
}

// vim: sts=2 sw=2 et ft=javascript : 
