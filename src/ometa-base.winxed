$include_const 'cclass.pasm';

function fail[anon, immediate]() {
  return Error('failed match');
}

function is_sequenceable[anon](var x) {
  if (x instanceof String || x instanceof Array)
    return true;
  else
    return false;
}

function typeof[anon](var o) {
  var t;
  ${ typeof t, o };
  return t;
}

class Failer {
  var used;
}

class OMInputStream {
  var memo;
  var lst;
  var idx;
  var hd;
  var tl;

  function init_pmc[vtable](var v) {
    self.memo = {};
    if (self.tl != null) {
      self.lst  = self.tl.lst;
      self.idx  = self.tl.idx;
    }
  }
  function head() { return self.hd; }
  function tail() { return self.tl; }
  function type() {
    using static typeof;
    return typeof(self.lst);
  }
  function upTo(var that) {
    var ans  = [];
    var curr = self;
    while (curr != that) {
      ans.push(curr.head());
      curr = curr.tail();
    }
    if (self.type == 'String')
      return ans.join('');
    else
      return ans;
  }
}

class OMInputStreamEnd : OMInputStream {
  function head() {
    using static fail;
    throw fail;
  }
  function tail() {
    using static fail;
    throw fail;
  }
}

class ListOMInputStream : OMInputStream {
  function init_pmc[vtable](var v) {
    self.hd = self.lst[self.idx];
  }
  function head() { return self.hd; }
  function tail() {
    using static makeListOMInputStream;
    if (self.tl == null)
      self.tl = makeListOMInputStream(self.lst, self.idx + 1);
    return self.tl;
  }
}

function makeListOMInputStream[anon](var lst, int idx[optional]) {
  var klass = get_class(idx < elements(lst) ? 'ListOMInputStream' : 'OMInputStreamEnd');
  // XXX workaround buggy tailcall into native methods
  var obj   = klass.new( lst:[named('lst')], idx:[named('idx')] );
  return obj;
}

// XXX delegation in stead of inheritance
class OMInputStreamProxy : OMInputStream {
  var target;
  function tail() {
    var tail = self.target.tail();
    var proxy = new OMInputStreamProxy({ 'target': self.target.tail });
    return proxy;
  }
}

class OMeta {
  var input;
  var fail;
  var stash;

  function init[vtable]() {
    using static fail;
    self.fail = fail;
  }

  function init_pmc[vtable](var v) {
    using static fail;
    self.fail  = fail;
    self.stash = {};
  }

  function get_pmc_keyed_str[vtable](string k) {
    return self.stash[k];
  }

  function set_pmc_keyed_str[vtable](string k, var v) {
    self.stash[k] = v;
  }

  function _apply(string rule) {
    using static fail;
    var memoRec = self.input.memo[rule];
    if (memoRec == null) {
      var origInput = self.input;
      var failer    = new Failer();
      var method;

      try       { method = find_method(self, rule); }
      catch (e) { die('tried to apply undefined rule "' + rule + '"'); }

      self.input.memo[rule] = failer;
      var ans               = callmethodwithargs(self, method, []);
      origInput.memo[rule]  = memoRec
                            = { 'ans': ans, 'nextInput': self.input };

      if (failer.used) {
	var sentinel = self.input;
	while (true) {
	  try {
	    self.input = origInput;
	    var ans = callmethodwithargs(self, method, []);
	    if (self.input === sentinel)
	      throw fail;
	    memoRec['ans']       = ans;
	    memoRec['nextInput'] = self.input;
	  } catch (e) {
	    if (e !== fail)
	      throw e;
	    break;
	  }
	}
      }
    } else if (memoRec instanceof Failer) {
      memoRec.used = true;
      throw fail;
    }
    self.input = memoRec['nextInput'];
    return memoRec['ans'];
  }

  function _applyWithArgs(string rule, var args[slurpy]) {
    for (int i = elements(args) - 1; i >= 0; i--)
      self._prependInput(args[i]);
    var method = find_method(self, rule);
    return callmethodwithargs(self, method, []);
  }

  function _superApplyWithArgs(string super_name, string rule, var args[slurpy]) {
    for (int i = elements(args) - 1; i >= 0; i--)
      self._prependInput(args[i]);
    var method = find_method(super_name, rule);
    return callmethodwithargs(self, method, []);
  }

  function _prependInput(var v) {
    self.input = new 'OMInputStream'({ 'hd':v, 'tl':self.input });
  }

  function memoizeParameterizedRules() {
    die("TODO");
  }

  function _pred(int b) {
    using static fail;
    if (b)
      return true;
    throw fail;
  }

  function _not(var x) {
    using static fail;
    var origInput = self.input;
    try       { callmethodwithargs(self, x, []); }
    catch (e) {
      if (e !== fail)
	throw e;
      self.input = origInput;
      return true;
    }
    throw fail;
  }

  function _lookahead(var x) {
    var origInput = self.input;
    var result    = callmethodwithargs(self, x, []);
    self.input    = origInput;
    return result;
  }

  function _or(var args[slurpy]) {
    using static fail;
    var origInput = self.input;
    for (var x in args) {
      try {
	self.input = origInput;
	return callmethodwithargs(self, x, []);
      } catch (e) {
	if (e !== fail)
	  throw e;
      }
    }
    throw fail;
  }

  function _xor(string rule_name, var args[slurpy]) {
    using static fail;
    var origInput = self.input;
    var ans;
    var newInput;
    for (var x in args) {
      try {
	self.input = origInput;
	ans = callmethodwithargs(self, x, []);
	if (newInput)
	  die('more than one choice matched by "exclusive-OR" in ' + rule_name);
	newInput = self.input;
      } catch (e) {
	if (e !== fail)
	  throw e;
      }
    }
    if (newInput) {
      self.input = newInput;
      return ans;
    } else {
      throw fail;
    }
  }

  function disableXORs() {
    die("TODO");
  }

  function _opt(var x) {
    using static fail;
    var origInput = self.input;
    var ans;
    try       { ans = callmethodwithargs(self, x, []); }
    catch (e) {
      if (e !== fail)
	throw e;
      self.input = origInput;
    }
    return ans;
  }

  function _many(var x, var first[optional], int has_first[opt_flag]) {
    using static fail;
    var ans = has_first ? [first] : [];
    while (true) {
      var origInput = self.input;
      try	{ callmethodwithargs(self, x, []); }
      catch (e) {
	if (e !== fail)
	  throw e;
	self.input = origInput;
	return ans;
      }
    }
  }

  function _many1(var x) {
    return self._many(x, callmethodwithargs(self, x, []));
  }

  function _form(var x) {
    using static fail;
    using static is_sequenceable;
    using static toOMInputStream;
    var v = self._apply('anything');
    if (!is_sequenceable(v))
      throw fail;
    var origInput = self.input;
    {
      self.input = toOMInputStream(v);
      var r = callmethodwithargs(self, x, []);
      self._apply('end');
    }
    self.input = origInput;
    return v;
  }

  function _consumedBy(var x) {
    var origInput = self.input;
    callmethodwithargs(self, x, []);
    return origInput.upTo(self.input);
  }

  function _idxConsumedBy(var x) {
    var origInput = self.input;
    callmethodwithargs(self, x, []);
    return {
      'fromIdx': origInput.idx,
      'toIdx':   self.input.idx
    };
  }

  function _interleave(var args[slurpy]) {
    die("TODO");
  }

  function _currIdx() { return self.input.idx; }

  function anything() {
    var ans    = self.input.head();
    self.input = self.input.tail();
    return ans;
  }

  function end() {
    return self._not(function (var _self) { _self._apply('anything'); });
  }

  function pos() { return self.input.idx; }

  function empty() { return true; }

  function apply() {
    return self._apply( self._apply('anything') );
  }

  function foreign() {
    var g      = self._apply('anything');
    var r      = self._apply('anything');
    var proxy  = new OMInputStreamProxy({ 'target': self.input });
    var gi     = g.new( proxy:[named('input')] );
    var ans    = gi._apply(r);
    self.input = gi.input.target;
    return ans;
  }

  function exactly() {
    using static fail;
    var wanted = self._apply('anything');
    // XXX not sure if === is as useful in winxed
    if (self._apply('anything') === wanted)
      return wanted;
    throw fail;
  }

  function null() {
    var ans = self._apply('anything');
    self._pred(ans == null);
    return ans;
  }

  function number() {
    var ans = self._apply('anything');
    self._pred(ans instanceof Number);
    return ans;
  }

  function string() {
    var ans = self._apply('anything');
    self._pred(ans instanceof String);
    return ans;
  }

  function char() {
    var ans = self._apply('anything');
    self._pred(ans instanceof String && length(ans) == 1);
    return ans;
  }

  function _cclass_char(int cclass) {
    string c = self._apply('char');
    int pred;
    ${ is_cclass pred, cclass, c, 0 };
    self._pred(pred);
    return c;
  }

  function space() { return self._cclass_char(CCLASS_WHITESPACE); }

  function spaces() {
    return self._many( function (var _self) { return _self._apply('space'); } );
  }

  function digit() { return self._cclass_char(CCLASS_NUMERIC); }

  function hexdigit() { return self._cclass_char(CCLASS_HEXADECIMAL); }

  function lower() { return self._cclass_char(CCLASS_LOWERCASE); }

  function upper() { return self._cclass_char(CCLASS_UPPERCASE); }

  function letter() { return self._cclass_char(CCLASS_ALPHABETIC); }

  function letterOrDigit() { return self._cclass_char(CCLASS_ALPHANUMERIC); }

  function firstAndRest() {
    var first = self._apply('anything');
    var rest  = self._apply('anything');
    return self._many(function (var _self) { return _self._apply(rest); }, self._apply(first));
  }

  function seq() {
    var xs = self._apply('anything');
    for (var x in xs)
      self._applyWithArgs('exactly', x);
    return xs;
  }

  function notLast() {
    var rule = self._apply('anything');
    var ans  = self._apply('rule');
    self._lookahead(function (var _self) { return _self._apply(rule); });
    return ans;
  }

  function _genericMatch(var input, var rule, var args, var matchFailed) {
    using static fail;
    using static typeof;
    var m = typeof(self).new( input:[named('input')], fail:[named('fail')] );
    try {
      if (args == null)
	return m._apply(rule);
      else
	return m._applyWithArgs(rule, args:[flat]);
    } catch (e) {
      if (e === fail && matchFailed != null) {
	var input = m.input;
	if (input.idx != null) {
	  while (input.tl != null && input.tl.idx != null)
	    input = input.tl;
	  --input.idx;
	}
	return matchFaile(m, input.idx);
      }
      throw e;
    }
  }

  function match(obj, rule, args[optional], matchFailed[optional]) {
    using static makeListOMInputStream;
    return self._genericMatch( makeListOMInputStream([obj]), rule, args, matchFailed );
  }

  function matchAll(list, rule, args[optional], matchFailed[optional]) {
    using static makeListOMInputStream;
    return self._genericMatch( makeListOMInputStream(list), rule, args, matchFailed );
  }
}
