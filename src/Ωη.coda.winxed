/* winxed-compiler */
function keywords_hash[anon, immediate]() {
  var keywords = ["break", "case", "catch", "continue", "default", "do", "else",
                  "for", "function", "if", "in", "instanceof", "new", "return", "switch",
                  "self", "throw", "try", "var", "while", "ometa", "class", "using",
		  "extern", "static", "string", "int", "num" ];
  var hsh = {};
  for (string k in keywords)
    hsh[k] = k;
}

class WinxedParser {
  function _isKeyword(string k) {
    using static keywords_hash;
    return keywords_hash[k] ? true : false;
  }
}

/* ometa-compiler */
class OMetaTranslator {
  function jumpTableCode(var cases) {
    var buf = new StringBuilder;
    buf.push("(function(var self){switch(self._apply('anything')){");
    for (var x in cases)
      buf.push("case " + x[0] + ":return " + x[1] + ";");
    buf.push("default: throw self.fail;}})(self)");
    return str(buf);
  }
}

/* ometa-optimizer */
class NullOptimization {
  function initialize() {
    self['_didSomething'] = false;
  }
}

