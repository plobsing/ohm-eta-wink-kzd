/* winxed-compiler */
function keywords_hash[anon, immediate]() {
  var keywords = ["break", "case", "catch", "continue", "default", "do", "else",
                  "for", "function", "if", "in", "instanceof", "new", "return", "switch",
                  "self", "throw", "try", "var", "while", "ometa", "class", "using",
		  "extern", "static", "string", "int", "num" ];
  var hsh = {};
  for (string k in keywords)
    hsh[k] = k;

  return hsh;
}

// class WinxedParser { /* re-open class */
function _isKeyword[method](string k) {
  using static keywords_hash;
  return keywords_hash[k] ? true : false;
}

function load[anon, load]() {
  using static _isKeyword;
  get_class('WinxedParser').add_method('_isKeyword', _isKeyword);
}
// } /* end class WinxedParser */

/* ometa-compiler */
// class OMetaTranslator { /* re-open class */
function jumpTableCode[method](var cases) {
  var buf = new StringBuilder;
  ${ push buf, "(function(var self){switch(self._apply('anything')){" };
  for (var x in cases) {
    string s = "case " + string(x[0]) + ":return " + string(x[1]) + ";";
    ${ push buf, s };
  }
  ${ push buf, "default: throw self.fail;}})(self)" };
  return string(buf);
}

function load[anon, load]() {
  using static jumpTableCode;
  get_class('OMetaTranslator').add_method('jumpTableCode', jumpTableCode);
}
// } /* end class OMetaTranslator */

/* ometa-optimizer */
// class NullOptimization { /* re-open class */
function nullopt_init_pmc[method](var pmc) {
  // XXX workaround set_integer_keyed winxed optimization
  var x = false;
  self['_didSomething'] = x;
}

function load[anon, load]() {
  using static nullopt_init_pmc;
  get_class('NullOptimization').add_vtable_override('init_pmc', nullopt_init_pmc);
}
// } /* end class NullOptimization

