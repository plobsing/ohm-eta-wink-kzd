/* lib abstraction */
function escapeStringFor[anon, immediate]() {
  var ret = new 'FixedStringArray'(256);

  for (int c = 0; c < elements(ret); c++)
    ret[c] = chr(c);
  ret[ord("\\")] = '\\';
  ret[ord('"' )] = '\"';
  ret[ord("'" )] = "\\'";
  ret[ord("\r")] = '\r';
  ret[ord("\n")] = '\n';
  ret[ord("\t")] = '\t';

  return ret;
}

function escapeChar(string x) {
  using static escapeStringFor;
  int charCode = ord(x);
  return charCode > 255 ? chr(charCode) : escapeStringFor[charCode];
}

function toProgramString(string x) {
  var cs = new StringBuilder;
  ${ push cs, '"' };
  for (string c in x) {
    c = escapeChar(c);
    ${ push cs, c };
  }
  ${ push cs, '"' };
  return string(cs);
}

function unescape(string x) {
  if (substr(x, 0, 1) == "\\") {
    string c = substr(x, 1, 1);
    switch (c) {
      case "\\": return "\\";
      case "r":  return "\r";
      case "n":  return "\n";
      case "t":  return "\t";
      default:   return c;
    }
  } else {
    return x;
  }
}

/* ometa-optimizer */
class JumpTable {
  var choiceOp;
  var choices;
  var choice;

  function init_pmc[vtable](var init) {
    self.choices = {};
    self.add(self.choice);
    self.choice = null;
  }

  function add(var choice) {
    string c = choice[0];
    var    t = choice[1];
    if (self.choices[c]) {
      if (self.choices[c][0] == self.choiceOp)
	self.choices[c].push(t);
      else
	self.choices[c] = [self.choiceOp, self.choices[c], t];
    } else {
      self.choices[c] = t;
    }
  }

  function toTree() {
    var r = ['JumpTable'];
    for (var k in self.choices)
      r.push([string(k), self.choices[k]]);
    return r;
  }
}

