#include "dual-defines.inc"

ometa WinxedParser <: Parser {
  fromTo :x :y = seq(x) (~seq(y) char)* seq(y), 
  space        = ^space | fromTo('//', '\n') | fromTo('/*', '*/'),
  nameFirst    = letter | '_',
  nameRest     = nameFirst | digit,
  iName        = firstAndRest(#nameFirst, #nameRest):r                               -> JOIN(r, ''),
  isKeyword :x = ?SELF._isKeyword(x),
  keyword      = iName:k isKeyword(k)                                                -> [k, k],
  nameTok      = iName:n                                                             -> [#name, n],
  hexDigit     = char:x {SELF['hexDigits'].indexOf(x.toLowerCase())}:v ?(v >= 0)     -> v,
  hexLit       = hexLit:n hexDigit:d                                                 -> (n * 16 + d)
               | hexDigit,
  number       = ``0x'' hexLit:n                                                     -> [#number, n]
               | digit+:ws ('.' digit+ | empty -> []):fs                             -> [#number, PARSEFLOAT(JOIN(ws, '') + '.' +
                                                                                                             JOIN(fs, ''))],
  escapeChar   = '\\' char:c                                                         -> unescape('\\' + string(c)),
  str          = seq('"""')  (escapeChar | ~seq('"""') char)*:cs seq('"""')          -> [#str, JOIN(cs, '')]
               | '\'' (escapeChar | ~'\'' char)*:cs '\''                             -> [#str, JOIN(cs, '')]
               | '"'  (escapeChar | ~'"'  char)*:cs '"'                              -> [#str, JOIN(cs, '')]
               | ('#' | '`') iName:n                                                 -> [#str, n],
  special      = ( '('   | ')'    | '{'    | '}'     | '['    | ']'     | ','    
                 | ';'   | '?'    | ':'    | ``!=='' | ``!='' | ``==='' | ``==''
                 | ``='' | ``>='' | '>'    | ``<=''  | '<'    | ``++''  | ``+=''
                 | '+'   | ``--'' | ``-='' | '-'     | ``*='' | '*'     | ``/=''
                 | '/'   | ``%='' | '%'    | ``&&='' | ``&&'' | ``||='' | ``||''
                 | '.'   | '!'                                                   ):s -> [s, s],
  tok          = spaces (keyword | nameTok | number | str | special),
  toks         = token*:ts spaces end                                                -> ts,
  token :tt    = tok:t ?(t[0] == tt)                                                 -> t[1],

  name         = spaces nameTok:t                                                    -> t[1],

  expr         = orExpr:e ( "?"   expr:t   ":" expr:f                                -> [#condExpr, e, t, f]
                          | "="   expr:rhs                                           -> [#set,  e, rhs]
                          | "+="  expr:rhs                                           -> [#mset, e, "+",  rhs]
                          | "-="  expr:rhs                                           -> [#mset, e, "-",  rhs]
                          | "*="  expr:rhs                                           -> [#mset, e, "*",  rhs]
                          | "/="  expr:rhs                                           -> [#mset, e, "/",  rhs]
                          | "%="  expr:rhs                                           -> [#mset, e, "%",  rhs]
                          | "&&=" expr:rhs                                           -> [#mset, e, "&&", rhs]
                          | "||=" expr:rhs                                           -> [#mset, e, "||", rhs]
                          | empty                                                    -> e
                          ),
  orExpr       = orExpr:x "||" andExpr:y                                             -> [#binop, "||", x, y]
               | andExpr,
  andExpr      = andExpr:x "&&" eqExpr:y                                             -> [#binop, "&&", x, y]
               | eqExpr,
  eqExpr       = eqExpr:x ( "=="  relExpr:y                                          -> [#binop, "==",  x, y]
                          | "!="  relExpr:y                                          -> [#binop, "!=",  x, y]
                          | "===" relExpr:y                                          -> [#binop, "===", x, y]
                          | "!==" relExpr:y                                          -> [#binop, "!==", x, y]
                          )
               | relExpr,
  relExpr      = relExpr:x ( ">"          addExpr:y                                  -> [#binop, ">",          x, y]
                           | ">="         addExpr:y                                  -> [#binop, ">=",         x, y]
                           | "<"          addExpr:y                                  -> [#binop, "<",          x, y]
                           | "<="         addExpr:y                                  -> [#binop, "<=",         x, y]
                           | "instanceof" addExpr:y                                  -> [#binop, "instanceof", x, y]
                           )
               | addExpr,
  addExpr      = addExpr:x "+" mulExpr:y                                             -> [#binop, "+",          x, y]
               | addExpr:x "-" mulExpr:y                                             -> [#binop, "-",          x, y]
               | mulExpr,
  mulExpr      = mulExpr:x "*" unary:y                                               -> [#binop, "*",          x, y]
               | mulExpr:x "/" unary:y                                               -> [#binop, "/",          x, y]
               | mulExpr:x "%" unary:y                                               -> [#binop, "%",          x, y]
               | unary,
  unary        = "-"      postfix:p                                                  -> [#unop,  "-",        p]
               | "+"      postfix:p                                                  -> [#unop,  "+",        p]
               | "++"     postfix:p                                                  -> [#preop, "++",       p]
               | "--"     postfix:p                                                  -> [#preop, "--",       p]
               | "!"      unary:p                                                    -> [#unop,  "!",        p]
               | postfix,
  postfix      = primExpr:p ( "++"                                                   -> [#postop, "++", p]
                            | "--"                                                   -> [#postop, "--", p]
                            | empty                                                  -> p
                            ),
  primExpr     = primExpr:p ( "[" expr:i "]"                                         -> [#getp, i, p]
                            | "." name:m "(" listOf(#expr, ','):as ")"               -> [#send, m, p].CONCAT(as)
                            | "." name:f                                             -> [#geta, [#get, f], p]
                            | "(" listOf(#expr, ','):as ")"                          -> [#call, p].CONCAT(as)
                            )
               | primExprHd,
  primExprHd   = "(" expr:e ")"                                                      -> e
               | "self"                                                              -> [#self]
               | "number":n                                                          -> [#number, n]
               | "str":s                                                             -> [#string, s]
               | anonFunc
               | "new" ( name
                       | "str":s -> toProgramString(s) ):cls
                   "(" ( expr | empty -> UNDEF ):e ")"                               -> [#new, cls, e]
               | "new" name:n                                                        -> [#new, n, UNDEF]
               | "[" listOf(#expr, ','):es "]"                                       -> [#arr].CONCAT(es)
               | json
               | name:n                                                              -> [#get, n],
  json         = "{" listOf(#jsonBinding, ','):bs "}"                                -> [#json].CONCAT(bs),
  jsonBinding  = jsonPropName:n ":" expr:v                                           -> [#binding, n, v],
  jsonPropName = "number" | "str" | name,
  formal       = var:v -> JOIN(v, ' ')
               | name,
  anonFunc     = "function" funcRest:f                                               -> [#anonfunc].CONCAT(f),
  funcRest     = "(" listOf(#formal, ','):fs ")" "{" srcElems:ss "}"                 -> [fs, ss],
  sc           = ";",
  block        = "{" srcElems:ss "}"                                                 -> ss,
  var          = ("var"|"string"|"int"|"num"):t name:n                               -> [t, n],
  varInit      = var:v ( "=" expr
                       | empty -> [#get, 'null'] ):i                                 -> [#varinit].CONCAT(v).CONCAT([i]),
  varNoInit    = var:v                                                               -> [#var].CONCAT(v),
  stmt         = block
               | varInit:r sc                                                        -> r
               | "if" "(" expr:c ")" stmt:t ( "else" stmt
                                            | empty -> [#get, ''] ):f                -> [#if, c, t, f]
               | "while" "(" expr:c ")" stmt:s                                       -> [#while,   c, s]
               | "do" stmt:s "while" "(" expr:c ")" sc                               -> [#doWhile, s, c]
               | "for" "(" ( varInit
                           | expr
                           | empty -> [#get, 'null'] ):i
                       ";" ( expr
                           | empty -> [#get, 'true']      ):c
                       ";" ( expr
                           | empty -> [#get, 'null'] ):u
                       ")" stmt:s                                                    -> [#for, i, c, u, s]
               | "for" "(" ( varNoInit
                           | expr                                             ):v
                      "in" expr:e
                       ")" stmt:s                                                    -> [#forIn, v, e, s]
               | "switch" "(" expr:e ")" "{"
                   ( "case" expr:c ":" srcElems:cs -> [#case, c, cs]
                   | "default"     ":" srcElems:cs -> [#default, cs] )*:cs
                 "}"                                                                 -> [#switch, e].CONCAT(cs)
               | "break" sc                                                          -> [#break]
               | "continue" sc                                                       -> [#continue]
               | "throw" expr:e sc                                                   -> [#throw, e]
               | "try" block:t "catch" "(" name:e ")" block:c                        -> [#try, t, e, c]
               | "return" ( expr
                          | empty -> [#get, UNDEF] ):e sc                            -> [#return, e]
               | expr:e sc                                                           -> e
               | "using" "static":t name:n               sc                          -> [#using, n, t]
               | "using" "extern":t listOf(#name, '.'):fqn sc                        -> [#using, JOIN(fqn, '.'), t]
               | "using"            listOf(#name, '.'):fqn sc                        -> [#using, JOIN(fqn, '.'), UNDEF]
               | ";"                                                                 -> [#get, "null"],
  classRest    = "{" classElem*:es "}"                                               -> [#begin].CONCAT(es),
  classBases   = ":" listOf(#name, ","):bs                                           -> bs,
  classBases   = empty                                                               -> [],
  classVar     = var:v ?(v[0] == 'var') sc                                           -> [#var].CONCAT(v),
  classElem    = funcDecl
               | classVar,

  flag         = name:n ( "(" expr:arg ")" -> arg
                        | empty            -> UNDEF
                        ):b                                                          -> [#flag, n, b],
  flagsList    = "[" listOf(#flag, ','):fs "]"                                       -> [#flaglist].CONCAT(fs),

  funcDecl     = "function" name:n 
                      ( flagsList
                      | empty       -> UNDEF
                      ):flags        funcRest:f                                      -> [#funcdecl, n, flags].CONCAT(f),
  classDecl    = "class"    name:n classBases:bs classRest:c                         -> [#classdecl, n, bs, c],

  srcElems     = stmt*:ss                                                            -> [#begin].CONCAT(ss),

  topElem      = funcDecl
               | classDecl
               | "ometa" -> [#ometa],
  topLevel     = topElem*:es spaces end                                              -> [#top].CONCAT(es)
}

ometa WinxedSemActionParser <: WinxedParser {
  curlySemAction = "{" expr:r "}" spaces                                     -> r
                 | "{" (stmt:s &(expr | stmt) -> s)*:ss
                       ( expr:r -> [#return, r] | stmt):s {ss.push(s)}
                   "}" spaces                                                -> [#call,
                                                                                      [#anonfunc, ['self'], [#begin].CONCAT(ss)],
                                                                                      [#self]],
  semAction      = curlySemAction
                 | primExpr:r spaces                                         -> r
}

ometa WinxedTranslator {
  trans          = [:t apply(t):ans]                    -> ans,
  curlyTrans     = [#begin curlyTrans:r]                -> r
                 | [#begin blockSemiTrans*:rs]          -> ('{' + JOIN(rs, '') + '}')
                 | blockSemiTrans:r                     -> ('{' + string(r) + '}'),
  blockSemiTrans = trans:x ( (?(x[STRLEN(x) - 1] == '}') -> x
                             | empty                    -> (string(x) + ';')
                             )
                           ):r                          -> r,

  self                                                  -> 'self',
  break                                                 -> 'break',
  continue                                              -> 'continue',
  number   :n                                           -> ('(' + string(n) + ')'),
  string   :s                                           -> toProgramString(s),
  arr      trans*:xs                                    -> ('[' + JOIN(xs, ',') + ']'),
  unop     :op trans:x                                  -> ('(' + string(op) + ' ' + string(x) + ')'),
  getp     trans:fd trans:x                             -> (string(x) + '[' + string(fd) + ']'),
  geta     trans:fd trans:x                             -> (string(x) + '.' + string(fd)),
  get      :x                                           -> x,
  set      trans:lhs trans:rhs                          -> ('(' + string(lhs) +              '=' + string(rhs) + ')'),
  mset     trans:lhs :op trans:rhs                      -> ('(' + string(lhs) + string(op) + '=' + string(rhs) + ')'),
  binop    :op trans:x trans:y                          -> ('(' + string(x) + ' ' + string(op) + ' ' + string(y) + ')'),
  preop    :op trans:x                                  -> (string(op) + string(x)),
  postop   :op trans:x                                  -> (string(x)  + string(op)),
  return   UNDEF                                        -> 'return',
  return   trans:x                                      -> ('return ' + string(x)),
  if       trans:cond curlyTrans:t curlyTrans:e         -> ('if(' + string(cond) + ')' + string(t) + 'else' + string(e)),
  condExpr trans:cond trans:t trans:e                   -> ('(' + string(cond) + '?' + string(t) + ':' + string(e) + ')'),
  while    trans:cond curlyTrans:body                   -> ('while(' + string(cond) + ')' + string(body)),
  doWhile  curlyTrans:body trans:cond                   -> ('do' + string(body) + 'while(' + string(cond) + ')'),
  for      trans:init trans:cond trans:upd
           curlyTrans:body                              -> ('for(' + string(init) + ';' + string(cond) + ';' + string(upd) + ')' + string(body)),
  forIn    trans:x trans:arr curlyTrans:body            -> ('for(' + string(x) + ' in ' + string(arr) + ')' + string(body)),
  using    :name UNDEF                                  -> ('using ' + string(name)),
  using    :name :type                                  -> ('using ' + string(type) + ' ' + string(name)),
  begin    blockSemiTrans*:xs                           -> ('{' + JOIN(xs, '') + '}'),
  top      trans*:xs                                    -> JOIN(xs, ''),
  flag     :name UNDEF                                  -> name,
  flag     :name :arg                                   -> (string(name) + '(' + string(arg) + ')'),
  flaglist trans*:fs                                    -> JOIN(fs, ','),
  anonfunc :args                    curlyTrans:body     -> ('(function (' +                                           JOIN(args, ',') + ')' + string(body) + ')'),
  funcdecl  :name UNDEF       :args curlyTrans:body     -> ('function ' + string(name) +                        '(' + JOIN(args, ',') + ')' + string(body)),
  funcdecl  :name trans:flags :args curlyTrans:body     -> ('function ' + string(name) + '[' + string(flags) + '](' + JOIN(args, ',') + ')' + string(body)),
  classdecl :name []     curlyTrans:body                -> ('class '    + string(name)                           + string(body)),
  classdecl :name :bases curlyTrans:body                -> ('class '    + string(name) + ':' + JOIN(bases, ',')  + string(body)),

  call     trans:fn trans*:args                         -> (string(fn)   +                     '(' + JOIN(args, ',') + ')'),
  send     :msg trans:recv trans*:args                  -> (string(recv) + '.' + string(msg) + '(' + JOIN(args, ',') + ')'),
  new      :cls UNDEF                                   -> ('new ' + string(cls) + '()'),
  new      :cls trans:arg                               -> ('new ' + string(cls) + '(' + string(arg) + ')'),
  var      :type :name                                  -> (string(type) + ' ' + string(name)),
  varinit  :type :name trans:init                       -> (string(type) + ' ' + string(name) + ' = ' + string(init)),
  throw    trans:x                                      -> ('throw ' + string(x)),
  try      curlyTrans:x :name curlyTrans:c              -> ('try ' + string(x) + 'catch(' + string(name) + ')' + string(c)),
  json     trans*:props                                 -> ('({' + JOIN(props, ',') + '})'),
  binding  :name trans:val                              -> (string(toProgramString(name)) + ': ' + string(val)),
  switch   trans:x trans*:cases                         -> ('switch(' + string(x) + '){' + JOIN(cases, ';') + '}'),
  case     trans:x trans:y                              -> ('case ' + string(x) + ': '+ string(y)),
  default          trans:y                              -> ('default: ' + string(y))
}

// vim: sts=2 sw=2 et ft=javascript nowrap :
