function main[main] (var argv) {
  string expr    = '6*(4+3)';
  int    result  = 6*(4+3);
  string invalid = 'fhqwhgads';

  using extern Test.More;
  using Test.More.plan;
  using Test.More.ok;
  using Test.More.is;

  plan(7);

  ok(  recognizer_test(expr),    'expr accepted' );
  ok( !recognizer_test(invalid), 'invalid expr rejected' );
  is( interpreter_test(expr), result );
  is( tree_interp_test(expr), result );

  var compiled = compilers_test(expr);
  for (string code in compiled)
    is( code, expr );
}

// a simple recognizer, produces no useful value
ometa L {
  number   = digit+,
  addExpr  = addExpr '+' mulExpr
           | addExpr '-' mulExpr
           | mulExpr,
  mulExpr  = mulExpr '*' primExpr
           | mulExpr '/' primExpr
           | primExpr,
  primExpr = '(' expr ')'
           | number,
  expr     = addExpr
}

function recognizer_test(string targ) {
  var m = new L;
  try {
    m.matchAll(targ, 'expr');
    return true;
  } catch (e) {
    if (e !== m.fail)
      throw e;
    return false;
  }
}

// a recognizer that also interprets
ometa Calc {
  digit    = ^digit:d                 -> d.digitValue(),
  number   = number:n digit:d         -> (n * 10 + d)
           | digit,
  addExpr  = addExpr:x '+' mulExpr:y  -> (x + y)
           | addExpr:x '-' mulExpr:y  -> (x - y)
           | mulExpr,
  mulExpr  = mulExpr:x '*' primExpr:y -> (x * y)
           | mulExpr:x '/' primExpr:y -> (x / y)
           | primExpr,
  primExpr = '(' expr:x ')'           -> x
           | number,
  expr     = addExpr
}

function interpreter_test(string targ) {
  var m = new Calc;
  return m.matchAll(targ, 'expr');
}

// parser and simple interpreter combo
ometa CalcParser {
  digit    = ^digit:d                 -> d.digitValue(),
  number   = number:n digit:d         -> (n * 10 + d)
           | digit,
  addExpr  = addExpr:x '+' mulExpr:y  -> ['add', x, y]
           | addExpr:x '-' mulExpr:y  -> ['sub', x, y]
           | mulExpr,
  mulExpr  = mulExpr:x '*' primExpr:y -> ['mul', x, y]
           | mulExpr:x '/' primExpr:y -> ['div', x, y]
           | primExpr,
  primExpr = '(' expr:x ')'           -> x
           | number:n                 -> ['num', n],
  expr     = addExpr
}

ometa CalcInterpreter {
  interp = ['num' anything:x]        -> x
         | ['add' interp:x interp:y] -> (x + y)
         | ['sub' interp:x interp:y] -> (x - y)
         | ['mul' interp:x interp:y] -> (x * y)
         | ['div' interp:x interp:y] -> (x / y)
}

function tree_interp_test(string targ) {
  var parse  = new CalcParser;
  var tree   = parse.matchAll(targ, 'expr');
  var interp = new CalcInterpreter;
  return interp.matchAll(tree, 'interp');
}

// we can write a "compiler" instead
ometa CalcCompiler {
  comp    = ['num' anything:x]    -> x.toString()
          | ['add' comp:x comp:y] -> ('(' + x + '+' + y + ')')
          | ['sub' comp:x comp:y] -> ('(' + x + '-' + y + ')')
          | ['mul' comp:x comp:y] -> ('(' + x + '*' + y + ')')
          | ['div' comp:x comp:y] -> ('(' + x + '/' + y + ')')
}

// spice things up with ML-like syntax
ometa MLishCalcCompiler {
  comp ['num' anything:x]    -> x.toString(),
  comp ['add' comp:x comp:y] -> ('(' + x + '+' + y + ')'),
  comp ['sub' comp:x comp:y] -> ('(' + x + '-' + y + ')'),
  comp ['mul' comp:x comp:y] -> ('(' + x + '*' + y + ')'),
  comp ['div' comp:x comp:y] -> ('(' + x + '/' + y + ')')
}

// a neat trick: dispatch on node tags using higher-order rule "apply"
ometa TrickyCalcCompiler {
  comp [anything:t apply(t):ans] -> ans,
  num  anything:x                -> x.toString(),
  add  comp:x comp:y             -> ('(' + x + '+' + y + ')'),
  sub  comp:x comp:y             -> ('(' + x + '-' + y + ')'),
  mul  comp:x comp:y             -> ('(' + x + '*' + y + ')'),
  div  comp:x comp:y             -> ('(' + x + '/' + y + ')')
}

function compilers_test(string targ) {
  var parse  = new CalcParser;
  var tree   = parse.matchAll(targ, 'expr');
  var compile;

  compile    = new CalcCompiler;
  var vanila = compile.match(tree, 'comp');

  compile    = new MLishCalcCompiler;
  var mlish  = compile.match(tree, 'comp');

  compile    = new TrickyCalcCompiler;
  var tricky = compile.match(tree, 'comp');

  return [ vanila, mlish, tricky ];
}
